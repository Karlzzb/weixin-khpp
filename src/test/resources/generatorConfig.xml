<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<!-- 配置Run As Maven build : Goals 参数 : mybatis-generator:generate -Dmybatis.generator.overwrite=true -->
<!-- 配置 tableName,使用 Run As Maven build 生成 dao model 层 -->
<generatorConfiguration>
	<!-- 配置文件路径 -->
	<properties url="${mybatis.generator.generatorConfig.properties}" />

	<!--数据库驱动包路径 -->
	<classPathEntry location="${drive.class.path}" />

	<context id="DB2Tables" targetRuntime="MyBatis3">
		<!--关闭注释 -->
		<commentGenerator>
			<property name="suppressAllComments" value="true" />
		</commentGenerator>

		<!--数据库连接信息 -->
		<jdbcConnection driverClass="${jdbc.driver}"
			connectionURL="${jdbc.url}" userId="${jdbc.username}" password="${jdbc.password}">
		</jdbcConnection>

		<!--生成的model 包路径 -->
		<javaModelGenerator targetPackage="${model.package}"
			targetProject="${target.project}">
			<property name="enableSubPackages" value="ture" />
			<property name="trimStrings" value="true" />
		</javaModelGenerator>

		<!--生成xml mapper文件 路径 -->
		<sqlMapGenerator targetPackage="${xml.mapper.package}"
			targetProject="${target.project}">
			<property name="enableSubPackages" value="ture" />
		</sqlMapGenerator>

		<!-- 生成的Dao接口 的包路径 -->
		<javaClientGenerator type="XMLMAPPER"
			targetPackage="${dao.package}" targetProject="${target.project}">
			<property name="enableSubPackages" value="ture" />
		</javaClientGenerator>

		<!--对应数据库表名 -->
		<table tableName="parking_offer">

			<!-- 参考 javaModelGenerator 的 constructorBased属性 -->
			<property name="constructorBased" value="false" />

			<!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； -->
			<property name="ignoreQualifiersAtRuntime" value="false" />

			<!-- 参考 javaModelGenerator 的 immutable 属性 -->
			<property name="immutable" value="false" />

			<!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper 
				XML文件中，只生成resultMap元素 -->
			<property name="modelOnly" value="false" />

			<!-- 参考 javaModelGenerator 的 rootClass 属性 <property name="rootClass" value=""/> -->

			<!-- 参考javaClientGenerator 的 rootInterface 属性 <property name="rootInterface" 
				value=""/> -->

			<!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog 
				<property name="runtimeCatalog" value=""/> -->

			<!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema <property 
				name="runtimeSchema" value=""/> -->

			<!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename 
				<property name="runtimeTableName" value=""/> -->

			<!-- 注意，该属性只针对MyBatis3Simple有用； 如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件； -->
			<property name="selectAllOrderByClause" value="age desc,username asc" />

			<!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate -->
			<property name="useActualColumnNames" value="false" />


			<!-- generatedKey用于生成生成主键的方法， 如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选 
				column:主键的列名； sqlStatement：要生成的selectKey语句，有以下可选项： Cloudscape:相当于selectKey的SQL为： 
				VALUES IDENTITY_VAL_LOCAL() DB2 :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL() 
				DB2_MF :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1 
				Derby :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL() HSQLDB :相当于selectKey的SQL为：CALL 
				IDENTITY() Informix :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from 
				systables where tabid=1 MySql :相当于selectKey的SQL为：SELECT LAST_INSERT_ID() 
				SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY() SYBASE :相当于selectKey的SQL为：SELECT 
				@@IDENTITY JDBC :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性 
				<generatedKey column="" sqlStatement=""/> -->

			<!-- 该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候， 比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等； 
				那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是 custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email； 
				注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的， 
				如果使用了columnOverride元素，该属性无效； <columnRenamingRule searchString="" replaceString=""/> -->


			<!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性； column:要重新设置的列名； 注意，一个table元素中可以有多个columnOverride元素哈~ -->
			<columnOverride column="username">
				<!-- 使用property属性来指定列要生成的属性名称 -->
				<property name="property" value="userName" />

				<!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名 <property name="javaType" value=""/> -->

				<!-- jdbcType用于指定该列的JDBC类型 <property name="jdbcType" value=""/> -->

				<!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler 
					只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述 
					<property name="jdbcType" value=""/> -->

				<!-- 参考table元素的delimitAllColumns配置，默认为false <property name="delimitedColumnName" 
					value=""/> -->
			</columnOverride>

			<!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 column:指定要忽略的列的名字； 
				delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false 注意，一个table元素中可以有多个ignoreColumn元素 
				<ignoreColumn column="deptId" delimitedColumnName=""/> -->

		</table>
	</context>
</generatorConfiguration>